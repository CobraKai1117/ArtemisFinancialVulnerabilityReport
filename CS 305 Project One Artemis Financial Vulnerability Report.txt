









CS 305 Project One 
Artemis Financial Vulnerability Assessment Report


Table of Contents

Document Revision History	3
Client	3
Instructions	3
Developer	4
1. Interpreting Client Needs	4
2. Areas of Security	5
3. Manual Review	5
4. Static Testing	6
5. Mitigation Plan	8






Document Revision History

VersionDateAuthorComments1.07/17/2022Kenneth Paulsen
Client



Instructions

Deliver this completed vulnerability assessment report, identifying your findings of security vulnerabilities and articulating recommendations for next steps to remedy the issues you have found. 
Respond to the five steps outlined below and include your findings. Replace the bracketed text on all pages with your own words. If you choose to include images or supporting materials, be sure to insert them throughout.



Developer
Kenneth Paulsen

1. Interpreting Client Needs
Determine your client’s needs and potential threats and attacks associated with their application and software security requirements. Consider the following regarding how companies protect against external threats based on the scenario information:

* What is the value of secure communications to the company?
* Are there any international transactions that the company produces?
* Are there governmental restrictions about secure communications to consider?
* What external threats might be present now and in the immediate future?
* What are the “modernization” requirements that must be considered, such as the role of open source libraries and evolving web application technologies?

What is the value of secure communications to the company? 

If the application endures a security breach, it could hamper the company’s reputation, future business dealings as well as their bottom line. It is easier to lose reputation vs gaining reputation. Once that reputation is lost it is very difficult to get back.

Are there any international transactions the company produces?

This can vary depending on the size and scope of the bank itself. However in this era of globalization, it is common for many banks to handle international transactions in some capacity. While the scenario details aren’t clear, it can be assumed the bank handles international clients.

Are there governmental restrictions about secure communications to consider?

Given how important money is in society, the financial sector is one of the most regulated sectors. An example is the Gramm-Leach-Billey Act which requires institutions to have standards in place for protecting client’s personal information (Kranz). Examples of these standards include encrypting personal data such as names, addresses and social security numbers. This can also include protecting against unauthorized access through encapsulation and role-based access control.

What external threats might be present now and in the immediate future? 

Technology is always changing which means the methods and exploits used by hackers will continuously be changing. Other important considerations include the development of new viruses, greater integration between different programs and the rise of hacktivists/nation-state hackers.

What are the modernization requirements that must be considered such as open-source libraries and evolving web application technologies?

Depending on how this API is used and what programs utilize it there could be many different areas where security could be an issue. Potential vulnerabilities and compatibility issues can crop up with using open-source software with the application. Vulnerabilities and issues with the programs are available for anyone to see since open source software is available for use by the public.This risk can be reduced by updating this software to the latest versions. 

There are also security issues that can occur within the API itself. If authorization isn’t properly secured and sensitive fields are exposed, an attacker can pretend to be an authorized user and gain access to sensitive user information such as bank accounts and personal information.  Another issue that can occur with an API is if too many calls are made to the API. This can exhaust program resources and set up the program for Denial-of-Service attacks. Finally, if the communications between the API and client/servers aren’t secure themselves, a hacker can alter the contents of the requests leading to a man in the middle attack.

2. Areas of Security
Referring to the Vulnerability Assessment Process Flow Diagram, identify which areas of security are applicable to Artemis Financial’s software application. Justify your reasoning for why each area is relevant to the software application.  

With this scenario, the areas of security we would need to be focused on include: 
1. APIs - In this scenario, the security of the API is of utmost importance. A lack of secure security measures would severely hamper the application since it relies on the API heavily.
2. Client/Server - As mentioned previously, this is an API application based on REST architecture. It will be using HTTP as the communications protocol. To further encrypt and secure these communications, HTTPS can be used.
3. Cryptography - Ensuring secure communications between the API and servers/clients is a must. An API’s primary use is to facilitate communications between users and data if these channels are insecure, the application can become compromised.
4. Input Validation - Valid input ensures appropriate commands are being sent and received between the API and the servers/clients.
5. Encapsulation - With messages being sent/received between the API and the client/servers, access to important data will need to be limited, especially with financial data. This means user roles would need to be defined in the program. A user with a guest role should not be allowed to make changes to users bank accounts. This encapsulation can also be extended to the code itself through the use of access modifiers that limit what parts of the program have access to sensitive data. If the data isn’t properly secured, parts of the program or users themselves can make potentially dangerous changes to the data whether accidental or intentional.

3. Manual Review
Continue working through the Vulnerability Assessment Process Flow Diagram. Identify all vulnerabilities in the code base by manually inspecting the code. 

Looking at the code base, there are several issues I’ve noticed:


1. Outdated software - In the pom.xml file, the dependency-check-maven version was originally 5.3 whereas the current version is 7.1.1. This was updated so I could properly run the Maven dependency tests. Bouncycastle is also slightly outdated. The version in the program is 1.46 and the current version is 1.71
2. Uses HTTP protocol for communicating rather than HTTPS which would be more secure.
3. There is no verification to ensure information being passed to GreetingController and CRUDController is valid.
4. In the DocData.java,in the read_document method, the username and password are hardcoded. This makes it easier for an attacker to gain control of the API 

4. Static Testing
Run a dependency check on Artemis Financial’s software application to identify all security vulnerabilities in the code. Record the output from dependency check report. Include the following:

a. The names or vulnerability codes of the known vulnerabilities
b. A brief description and recommended solutions provided by the dependency check report
c. Attribution (if any) that documents how this vulnerability has been identified or documented previously

After running a dependency check through Maven, the report listed 12 vulnerable dependencies found and a total of 79 vulnerabilities found.  

These are the dependencies listed as well as the codes associated with them:

Bcprov-jdk15on-1.46.jar:
* CVE-2016-1000338/ CVE 2016-1000342 - Earlier Bouncy Castle versions don’t fully validate signatures on verifications
* CVE-2016-1000343 - Earlier versions of Bouncy Castle generate weak private keys if used with default values. Can be resolved by passing in parameters to key/value generator
* CVE-2016-1000344/CVE-2016-1000352 - Earlier versions of Bouncy Castle allow using ECB mode which is considered unsafe 
* CVE-2016-1000341 - Earlier versions of Bouncy Castle are vulnerable to timing attacks. This allows a hacker to gain information about a private value
* CVE-2016-1000345 - Earlier versions of Bouncy Castle are vulnerable to oracle attacks. 
* CVE-2017-13098 - Earlier versions of Bouncy Castle can potentially allow a hacker to recover a private key from an application
* CVE-2020-15522 - Earlier versions of Bouncy Castle can expose information about a private key that the hacker can exploit
* CVE-2020-0187 - In engineSetMode of BaseblockCipher.java there is a possible incorrect cryptographic algorithm used due to an incomplete comparison, leading to local information being exposed.
* CVE-2016-1000339
* CVE-2020-26939 - In previous versions of Bouncy Castle, attackers can obtain sensitive information due to input errors.
* CVE-2015-7940
* CVE-2018-5382
* CVE-2013-1624
* CVE-2016-1000346 - In previous bouncy castle versions, public keys are not fully validated. Invalid keys can result in sensitive information being exposed.
* CVE-2015-6644

hibernate-validator-6.0.18.Final.jar
* CVE-2020-10693 - A flaw in version 6.1.2 of Hibernate Validator has an exploit which allows attackers to bypass input sanitation controls

Jackson-databind-2.10.2.jar
* CVE-2020-25649 - A flaw in FasterXML Jackson Databind allows the possibility of XML external entity attacks
* CVE-2020-26518 - Jackson-databind before 2.13 allows a Java StackOverflow exception and DDOS on nested objects

Jakarta.annotation-api-1.3.5.jar
* CVE-2022-31569

Log4j-api-2.12.1.jar
* CVE-2020-9488 - Improper validation of web certificates allows a connection to possibly be intercepted with man in the middle attacks

Logback-core-1.2.3.jar
* CVE-2021-42550

Snakeyami-1.25.jar
* CVE-2017-18640

Spring-boot-2.2.4.RELEASE.jar
* CVE-2022-27772

Spring-core-5.2.3.RELEASE.jar
* CVE-2022-22965
* CVE-2021-22118
* CVE-2020-5421
* CVE-2022-22950
* CVE-2022-22971
* CVE-2022-22968
* CVE-2022-22970
* CVE-2021-22060
* CVE-2021-22096

Spring-web-5.2.3.RELEASE.jar
* CVE-2016-1000027
* CVE-2022-22965
* CVE-2021-22118
* CVE-2020-5421
* CVE-2022-22950
* CVE-2022-22971
* CVE-2022-22968
* CVE-2022-22970
* CVE-2021-22060
* CVE-2021-22096

Tomcat-embed-core-9.0.30.jar
* CVE-2020-1938
* CVE-2020-11996
* CVE-2020-13934
* CVE-2020-13935
* CVE-2020-17527
* CVE-2021-25122
* CVE-2021-41079
* CVE-2022-29885
* CVE-2020-9484
* CVE-2021-25329
* CVE-2021-30640
* CVE-2022-34305
* CVE-2021-24122
* CVE-2021-33037
* CVE-2019-17569
* CVE-2020-1935
* CVE-2020-13943

Tomcat-embed-websocket-9.0.30.jar


* CVE-2020-1938
* CVE-2020-8022
* CVE-2020-11996
* CVE-2020-13934
* CVE-2020-13935
* CVE-2020-17527
* CVE-2021-25122
* CVE-2021-41079
* CVE-2022-29885
* CVE-2020-9484
* CVE-2021-25329
* CVE-2021-30640
* CVE-2022-34305
* CVE-2021-24122
* CVE-2021-33037
* CVE-2019-17569
* CVE-2020-1935
* CVE-2020-13943

5. Mitigation Plan
After interpreting your results from the manual review and static testing, identify the steps to remedy the identified security vulnerabilities for Artemis Financial’s software application.

Based on the findings presented above, there are several ways to resolve many of the security issues with this application: 
1. Utilize HTTPS with encryption to secure communications between the API and servers/clients
2. Update the dependencies to their most current versions. Many of the issues mentioned by the Maven dependency check referred to old outdated versions of these dependencies being used.
3. Provide proper validation measures for information being passed to other parts of the program. As mentioned in part 3, parts of the API, particularly the controllers, did not validate information being passed in. Having validation checks to ensure input being passed in can reduce potential attacks such as injection attacks or memory leaks
4. In the DocData.java file the username and password are hardcoded. To fix this, this information should be stored through a separate file in a secure location.

Sources cited:
Kranz, G. (2021, June 17). What is the Gramm-Leach-Bliley Act? SearchCIO. Retrieved July 17, 2022, from https://www.techtarget.com/searchcio/definition/Gramm-Leach-Bliley-Act 




1


